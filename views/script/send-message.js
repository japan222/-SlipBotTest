let foundUsersFull = []; // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á [{ userId, prefix, accessToken }]
let uploadedImageURL = null;

window.addEventListener("beforeunload", async () => {
  try {
    // ‡πÉ‡∏ä‡πâ session cookie ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ credentials: 'include' ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    const res = await fetch("/api/delete-my-upload", {
      method: "DELETE",
      credentials: "include" // ‡∏™‡πà‡∏á sessionId ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    });

    if (res.ok) {
      console.log("‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    } else {
      console.warn("‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  } catch (err) {
    console.error("‚ùå Error ‡∏ï‡∏≠‡∏ô‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô unload:", err);
  }
});

async function removeImage() {
  const previewImg = document.getElementById('preview-img');
  const previewWrapper = document.getElementById('preview-image');
  const imageInput = document.getElementById('imageUpload');

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
  uploadedImageURL = null;
  previewImg.src = '';
  previewWrapper.style.display = 'none';
  imageInput.value = '';

  try {
    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å server
    const res = await fetch("/api/delete-my-upload", {
      method: "DELETE",
      credentials: "include"
    });

    if (!res.ok) {
      console.warn("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å server ‡πÑ‡∏î‡πâ");
    }
  } catch (err) {
    console.error("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:", err);
  }
}

async function handleImageSelect(event) {
  try {
    const file = event.target.files[0];
    if (!file) return;

    const previewImg = document.getElementById('preview-img');
    const previewWrapper = document.getElementById('preview-image');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    const allowedTypes = ["image/jpeg", "image/png", "image/webp", "image/jpg"];
    if (!allowedTypes.includes(file.type)) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (JPG, PNG, WebP)');
      event.target.value = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB)
    if (file.size > 20 * 1024 * 1024) {
      alert('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20MB');
      event.target.value = '';
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á preview
    const reader = new FileReader();
    reader.onload = async function(e) {
      try {
        uploadedImageURL = e.target.result;
        previewImg.src = uploadedImageURL;
        previewWrapper.style.display = 'none';

        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        const formData = new FormData();
        formData.append('image', file);

        const response = await fetch('/api/upload-send-image-line', {
          method: 'POST',
          body: formData,
          credentials: 'include'
        });

        const data = await response.json();

        if (response.ok && data.success) {
          console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
          previewWrapper.style.display = 'block';
          previewImg.title = `ID: ${data.fileId || ''})`;
          alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        } else {
          throw new Error(data.error || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        }
      } catch (uploadError) {
        console.error('‚ùå Upload error:', uploadError);
        alert(uploadError.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î');
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå preview ‡πÅ‡∏•‡∏∞ input ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
        previewImg.src = '';
        previewWrapper.style.display = 'none';
        event.target.value = '';
        uploadedImageURL = null;
      }
    };

    reader.readAsDataURL(file);
  } catch (err) {
    console.error('‚ùå General error:', err);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå');
    event.target.value = '';
  }
}

async function lookupUser() {
  const input = document.getElementById("userId");
  const rawInput = input?.value?.trim();

  const lookupStatus = document.getElementById("lookup-status");
  const userNotFound = document.getElementById("user-not-found");

  lookupStatus.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...";
  lookupStatus.style.color = "black";
  userNotFound.textContent = "";

  if (!rawInput) {
    lookupStatus.textContent = "* ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô";
    lookupStatus.style.color = "orange";
    return;
  }

  const userList = [...new Set(extractUserIds(rawInput))];
  if (userList.length === 0) {
    lookupStatus.textContent = "* ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    lookupStatus.style.color = "orange";
    return;
  }

  try {
    const res = await fetch('/api/user-lookup-batch', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ usernames: userList }),
    });
    const data = await res.json();

    foundUsersFull = [];
    const notFoundUsers = [];

    for (const user of data.results) {
      if (user.found) {
        foundUsersFull.push({
          userId: user.userId,
          prefix: user.username.substring(0, 3),
          accessToken: user.accessToken,
        });
      } else {
        notFoundUsers.push(user.username);
      }
    }

    const foundCount = foundUsersFull.length;
    const color = foundCount === 0 ? "red" : (foundCount < userList.length ? "orange" : "green");
    lookupStatus.innerHTML = `‡∏û‡∏ö USER : <span style="color:${color}">${foundCount} / ${userList.length}</span> ‡∏Ñ‡∏ô`;

    if (notFoundUsers.length > 0) {
      const displayLimit = 24;
      const shownUsers = notFoundUsers.slice(0, displayLimit);
      const result = "‡πÑ‡∏°‡πà‡∏û‡∏ö USER : " + shownUsers.join(", ") + (notFoundUsers.length > displayLimit ? " ..." : "");
      userNotFound.textContent = result;
      userNotFound.style.color = "gray";
    }

  } catch (err) {
    console.error("‚ùå Error in batch lookup:", err);
    lookupStatus.textContent = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤";
    lookupStatus.style.color = "red";
  }
}

function extractUserIds(rawInput) {
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, comma ‡πÅ‡∏•‡∏∞ newline
  const cleanInput = rawInput.toUpperCase().replace(/[\s,]+/g, "");

  const matches = [];
  const regex = /([A-Z]{3})(\d+)/g;
  let match;

  while ((match = regex.exec(cleanInput)) !== null) {
    const prefix = match[1];
    const digits = match[2];
    matches.push(prefix + digits);
  }

  return matches;
}

async function sendMessageToFoundUsers(event) {
  if (event) event.preventDefault();

  const message = document.getElementById("message")?.value?.trim();

  if (!message && !uploadedImageURL) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á");
    return;
  }

  if (!foundUsersFull || foundUsersFull.length === 0) {
    alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏à‡∏≠");
    return;
  }

  sendMessageLog("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á ...");

  for (const user of foundUsersFull) {
    const { userId, shopName = "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô" } = user;

    try {
      const formData = new FormData();
      formData.append("userId", userId);
      formData.append("message", message || "");

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á blob ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ
      if (uploadedImageURL) {
        try {
          const response = await fetch(uploadedImageURL);
          if (!response.ok) {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ");
          }
          const blob = await response.blob();
          console.log("Blob size:", blob.size);
          console.log("Blob type:", blob.type);
          const contentType = blob.type || "image/jpeg";
          const extension = contentType.split("/")[1] || "jpg";

          if (blob.size === 0) {
            throw new Error("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
          }
          if (blob.size > 10 * 1024 * 1024) { // 10MB
            throw new Error("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÄ‡∏Å‡∏¥‡∏ô 10MB)");
          }

          formData.append("image", blob, `uploaded-image.${extension}`);
        } catch (error) {
          throw new Error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${error.message}`);
        }
      }

      const res = await fetch("/api/send-message", {
        method: "POST",
        body: formData,
      });

      const contentType = res.headers.get("content-type") || "";
      if (!contentType.includes("application/json")) {
        const raw = await res.text();
        throw new Error(`‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ response ‡πÄ‡∏õ‡πá‡∏ô JSON (HTML): ${raw.slice(0, 100)}`);
      }

      const data = await res.json();

      if (data.success) {
        const usedLine = data.usedLine || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
        sendMessageLog(`‚úÖ ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${userId} ‡∏£‡πâ‡∏≤‡∏ô ${shopName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (LINE: ${usedLine})`);
      } else {
        sendMessageLog(`‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${userId} ‡∏£‡πâ‡∏≤‡∏ô ${shopName} - ${data.error || "Unknown error"}`);
      }

    } catch (err) {
      sendMessageLog(`‚ùå Error: ${userId} - ${err.message}`);
    }
  }

  sendMessageLog("üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞");
  
  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
  uploadedImageURL = null;
  const previewImg = document.getElementById('preview-img');
  const previewWrapper = document.getElementById('preview-image');
  if (previewImg) previewImg.src = '';
  if (previewWrapper) previewWrapper.style.display = 'none';
}

function sendMessageLog(message) {
  const logBox = document.getElementById("statusBox");
  if (logBox) {
    const p = document.createElement("p");
    p.textContent = message;
    logBox.appendChild(p);
    logBox.scrollTop = logBox.scrollHeight;
  }
}