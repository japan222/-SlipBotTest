// routes/api/line-images.js
import sharp from "sharp";
import Shop from "../../models/Shop.js";
import multer from "multer";
import express from "express";

const router = express.Router();

const upload = multer();

router.post("/upload-bonus-image", upload.single("image"), async (req, res) => {
  try {
    const { prefix } = req.body;

    if (!req.file) {
      return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" });
    }

    // üñºÔ∏è ‡∏£‡∏±‡∏ö buffer ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
    let imageBuffer = req.file.buffer;

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JPEG ‡πÄ‡∏™‡∏°‡∏≠
    imageBuffer = await sharp(imageBuffer)
      .flatten({ background: { r: 255, g: 255, b: 255 } }) // ‡∏Å‡∏±‡∏ô transparency ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß
      .jpeg() // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î quality ‚Üí ‡πÉ‡∏ä‡πâ default ‡πÄ‡∏ï‡πá‡∏° ‡πÜ
      .toBuffer();

    await Shop.findOneAndUpdate(
      { prefix },
      {
        bonusImage: {
          data: imageBuffer,
          contentType: "image/jpeg",
        },
      },
      { new: true, upsert: true }
    );

    res.json({ success: true, message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û BonusTime ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    console.error("‚ùå Upload Error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

router.get('/get-bonus-image-original', async (req, res) => {
  const { prefix } = req.query;

  const shop = await Shop.findOne({ prefix });
  if (!shop || !shop.bonusImage) return res.sendStatus(404);

  const imageBuffer = shop.bonusImage.data;
  const contentType = shop.bonusImage.contentType || 'image/png';

  res.set('Content-Type', contentType);
  res.set('Cache-Control', 'no-store'); // üîí ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cache
  res.send(imageBuffer); // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á raw buffer ‡∏ï‡∏£‡∏á ‡πÜ
});

// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏£‡∏π‡∏õ BonusTime ‡∏à‡∏£‡∏¥‡∏á
router.get("/get-bonus-image", async (req, res) => {
  const { prefix } = req.query;
  const shop = await Shop.findOne({ prefix });

  if (!shop || !shop.bonusImage?.data) {
    return res.status(404).json({ success: false, message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ BonusTime" });
  }

  try {
    const optimized = await sharp(shop.bonusImage.data)
      .resize(600) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
      .jpeg({ quality: 70 }) // ‡∏•‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏•‡∏á
      .toBuffer();

    res.set("Content-Type", "image/jpeg");
    res.send(optimized);
  } catch (err) {
    console.error("‚ùå Sharp Error:", err);
    res.status(500).send("Server error");
  }
});

router.post("/delete-bonus-image", async (req, res) => {
  try {
    const { prefix } = req.body;
    const shop = await Shop.findOne({ prefix });
    if (!shop) return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤" });

    shop.bonusImage = undefined; // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å
    await shop.save();

    res.json({ success: true, message: "‡∏•‡∏ö‡∏£‡∏π‡∏õ BonusTime ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå Error deleting bonus image:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

router.get('/get-password-image-original', async (req, res) => {
  const { prefix } = req.query;

  const shop = await Shop.findOne({ prefix });
  if (!shop || !shop.passwordImage) return res.sendStatus(404);

  const imageBuffer = shop.passwordImage.data;
  const contentType = shop.passwordImage.contentType || 'image/png';

  res.set('Content-Type', contentType);
  res.set('Cache-Control', 'no-store'); // üîí ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cache
  res.send(imageBuffer); // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á raw buffer ‡∏ï‡∏£‡∏á ‡πÜ
});

router.post("/upload-password-image", upload.single("image"), async (req, res) => {
  try {
    const { prefix } = req.body;

    let imageBuffer = req.file.buffer;

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JPEG ‡πÄ‡∏™‡∏°‡∏≠
    imageBuffer = await sharp(imageBuffer)
      .flatten({ background: { r: 255, g: 255, b: 255 } })
      .jpeg()
      .toBuffer();

    await Shop.findOneAndUpdate(
      { prefix },
      {
        passwordImage: {
          data: imageBuffer,
          contentType: "image/jpeg",
        },
      },
      { new: true, upsert: true }
    );

    res.json({ success: true, message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û ‡∏•‡∏∑‡∏° Password ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (error) {
    console.error("‚ùå upload error:", error);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ" });
  }
});

// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏£‡∏π‡∏õ password ‡∏à‡∏£‡∏¥‡∏á
router.get("/get-password-image", async (req, res) => {
  const { prefix } = req.query;
  const shop = await Shop.findOne({ prefix });

  if (!shop || !shop.passwordImage?.data) {
    return res.status(404).json({ success: false, message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ ‡∏•‡∏∑‡∏° Password" });
  }

  try {
    const optimized = await sharp(shop.passwordImage.data)
      .resize(600) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
      .jpeg({ quality: 70 }) // ‡∏•‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏•‡∏á
      .toBuffer();

    res.set("Content-Type", "image/jpeg");
    res.send(optimized);
  } catch (err) {
    console.error("‚ùå Sharp Error:", err);
    res.status(500).send("Server error");
  }
});

router.post("/delete-password-image", async (req, res) => {
  try {
    const { prefix } = req.body;
    const shop = await Shop.findOne({ prefix });
    if (!shop) return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤" });

    shop.passwordImage = undefined; // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å
    await shop.save();

    res.json({ success: true, message: "‡∏•‡∏ö‡∏£‡∏π‡∏õ Password ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå Error deleting password image:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

export default router;