import { broadcastLog } from "../utils/logManager.js";

export async function sendMessageWait1(replyToken, client) {
    try {
        const messages = [
            "น้องแอดมินกำลังตรวจสอบให้นะค้าา ขอเวลา 1-2 นาทีนะคะ 💐🙏",
            "ขอเวลาหนูตรวจสอบสักครู่นะคะ แป๊บเดียวเท่านั้น เดี๋ยวน้องแอดมินรีบแจ้งให้ทราบนะคะ 🙇‍♂️🌷🤗",
            "ขอเวลาแอดตรวจสอบสักครู่นะคะ ขอเวลา 1-2 นาทีนะคะ ขออภัยที่ล่าช้านะค้าา 🙏🌷",
            "หนูกำลังตรวจสอบให้อยู่ค่ะ ขออภัยที่ล่าช้านะค้าา ขอเวลา 1-2 นาทีนะคะ 🙏💖",
            "แอดทำการตรวจสอบให้นะคะ ขอเวลาสักครู่น้าา เสร็จแล้วแอดแจ้งนะคะ 🙇‍♂️✨",
            "รบกวนลูกค้ารอสักครู่ รายการกำลังถูกตรวจสอบนะคะ เดี๋ยวแอดมินแจ้งให้ทราบอีกครั้งนะค้า 🙇‍♂️💞",
            "แอดมินกำลังตรวจสอบและดำเนินการให้สักครู่นะคะ ขอเวลาแป๊บเดียวเท่านั้นค่ะ 🙏🌟",
            "หนูกำลังตรวจสอบให้นะค้าา ขอเวลาแป๊บนึงนะคะคุณลูกค้า 🌼💜"
        ];

        const randomMessage = messages[Math.floor(Math.random() * messages.length)];

        await client.replyMessage(replyToken, {
            type: "text",
            text: `🟢 ${randomMessage}`
        });

        console.log(`ตอบกลับแล้ว: 🟢 ${randomMessage}`);
        broadcastLog(`ตอบกลับแล้ว: 🟢 ${randomMessage}`); // ส่งข้อความไปยังฟังก์ชัน broadcastLog
    } catch (err) {
        console.error("เกิดข้อผิดพลาดในการส่งข้อความ:", err.message || err);
        broadcastLog("เกิดข้อผิดพลาดในการส่งข้อความ:", err.message || err); // ส่งข้อความไปยังฟังก์ชัน broadcastLog
    }
}

export async function sendMessageWait2(replyToken, client) {
    try {
        const messages = [
            "น้องแอดมินกำลังเร่งตรวจสอบให้นะค้าา ขออภัยที่ล่าช้านะ ขอเวลา 1-2 นาทีค่า 💐🤍🙏",
            "ขอเวลาแอดมินตรวจสอบสักครู่นะคะ แป๊บเดียวเท่านั้น เดี๋ยวน้องแอดมินรีบแจ้งให้ทราบนะคะ 🙇‍♂️🤗",
            "ขอเวลาแอดตรวจสอบสักครู่นะคะ ขออภัยที่ล่าช้านะค้าา ขอเวลา 1-2 นาทีนะคะ 💜🙏",
            "หนูกำลังรีบตรวจสอบให้อยู่ค่ะ ขออภัยที่ล่าช้านะค้าา ขอเวลา 1-2 นาทีนะคะ 🙏💖",
            "แอดมินกำลังรีบดำเนินการให้อยู่ค่า ขอเวลาสักครู่น้าา เดี๋ยวแจ้งผลให้เลยค่า 🙇‍♂️✨",
            "รายการกำลังถูกตรวจสอบนะคะ เดี๋ยวแอดมินแจ้งให้ทราบอีกครั้งนะค้า 🌷🙇‍♂️💞",
            "แอดมินกำลังเร่งตรวจสอบและดำเนินการให้นะคะ ขอเวลาแป๊บเดียวเท่านั้นค่ะ 🙏🌟",
            "หนูกำลังรีบตรวจสอบให้นะค้าา ขอเวลาอีกสักครู่ เดี๋ยวแอดรีบแจ้งไปน้าา ✨💜"
        ];

        const randomMessage = messages[Math.floor(Math.random() * messages.length)];

        await client.replyMessage(replyToken, {
            type: "text",
            text: `🟢 ${randomMessage}`
        });

        console.log(`ตอบกลับแล้ว: 🟢 ${randomMessage}`);
        broadcastLog(`ตอบกลับแล้ว: 🟢 ${randomMessage}`); // ส่งข้อความไปยังฟังก์ชัน broadcastLog
    } catch (err) {
        console.error("เกิดข้อผิดพลาดในการส่งข้อความ:", err.message || err);
        broadcastLog("เกิดข้อผิดพลาดในการส่งข้อความ:", err.message || err); // ส่งข้อความไปยังฟังก์ชัน broadcastLog
    }
}

export async function sendMessageWait3(replyToken, client) {
    try {
        const messages = [
            "น้องแอดมินกำลังตรวจสอบให้นะค้าา ขอเวลา 1-2 นาทีนะคะ 💐🙏",
            "ขอเวลาหนูตรวจสอบสักครู่นะคะ แป๊บเดียวเท่านั้น เดี๋ยวน้องแอดมินรีบแจ้งให้ทราบนะคะ 🙇‍♂️🌷🤗",
            "ขอเวลาแอดตรวจสอบสักครู่นะคะ ขอเวลา 1-2 นาทีนะคะ ขออภัยที่ล่าช้านะค้าา 🙏🌷",
            "หนูกำลังตรวจสอบให้อยู่ค่ะ ขออภัยที่ล่าช้านะค้าา ขอเวลา 1-2 นาทีนะคะ 🙏💖",
            "แอดทำการตรวจสอบให้นะคะ ขอเวลาสักครู่น้าา เสร็จแล้วแอดแจ้งนะคะ 🙇‍♂️✨",
            "รบกวนลูกค้ารอสักครู่ รายการกำลังถูกตรวจสอบนะคะ เดี๋ยวแอดมินแจ้งให้ทราบอีกครั้งนะค้า 🙇‍♂️💞",
            "แอดมินกำลังตรวจสอบและดำเนินการให้สักครู่นะคะ ขอเวลาแป๊บเดียวเท่านั้นค่ะ 🙏🌟",
            "หนูกำลังตรวจสอบให้นะค้าา ขอเวลาแป๊บนึงนะคะคุณลูกค้า 🌼💜"
        ];

        const randomMessage = messages[Math.floor(Math.random() * messages.length)];

        await client.replyMessage(replyToken, {
            type: "text",
            text: `🟡 ${randomMessage}`
        });

        console.log(`ตอบกลับแล้ว: 🟡 ${randomMessage}`);
        broadcastLog(`ตอบกลับแล้ว: 🟡 ${randomMessage}`); // ส่งข้อความไปยังฟังก์ชัน broadcastLog
    } catch (err) {
        console.error("❌ เกิดข้อผิดพลาดในการส่งข้อความ:", err.message || err);
        broadcastLog("❌ เกิดข้อผิดพลาดในการส่งข้อความ:", err.message || err); // ส่งข้อความไปยังฟังก์ชัน broadcastLog
    }
}
